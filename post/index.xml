<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jerry&#39;s Blog</title>
    <link>https://mfslog.github.io/post/</link>
    <description>Recent content in Posts on Jerry&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn-ZH</language>
    <copyright>© This post is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License，please give source if you wish to quote or reproduce.</copyright>
    <lastBuildDate>Sat, 12 Jan 2019 18:50:33 +0800</lastBuildDate>
    
	<atom:link href="https://mfslog.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 继承和多态</title>
      <link>https://mfslog.github.io/post/go-oop/</link>
      <pubDate>Sat, 12 Jan 2019 18:50:33 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/go-oop/</guid>
      <description>&lt;p&gt;go 语言并不是纯粹的面向对象语言，那么如何实现oop呢？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 对象构造</title>
      <link>https://mfslog.github.io/post/go-ctor/</link>
      <pubDate>Sat, 12 Jan 2019 11:36:12 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/go-ctor/</guid>
      <description>&lt;p&gt;在使用go编程的时候，如果采用面向对象的方法，那么我们需要构造对象。而go语言并不是纯粹的面向对象语言，所以不像C++类似
的语言有默认构造函数，带参的构造函数，复制构造函数等。接下来，就来介绍下go 语言中如何构造对象&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Protocolbuffers Go</title>
      <link>https://mfslog.github.io/post/protocolbuffers-go/</link>
      <pubDate>Mon, 26 Nov 2018 21:54:30 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/protocolbuffers-go/</guid>
      <description>&lt;p&gt;在使用protocolbuffers的时候，遇到一些坑，在这里记录下，以免忘记&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[think]基于事件的游戏结算系统</title>
      <link>https://mfslog.github.io/post/think-game-result/</link>
      <pubDate>Mon, 05 Nov 2018 22:29:51 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/think-game-result/</guid>
      <description>&lt;p&gt;竞技类游戏在游戏结束的时候都会进行天梯分的计算。例如：dota,lol&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kit Log</title>
      <link>https://mfslog.github.io/post/kit-log/</link>
      <pubDate>Wed, 11 Jul 2018 10:55:57 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/kit-log/</guid>
      <description>&lt;p&gt;kit 工具库提供了一个日志包。kit 认为日志库应该是最小接口和结构化的记录。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kit Prometheus</title>
      <link>https://mfslog.github.io/post/kit-prometheus/</link>
      <pubDate>Thu, 05 Jul 2018 22:29:51 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/kit-prometheus/</guid>
      <description>&lt;p&gt;kit 工具包中包含了仪表客户端。通过实例addsvc 例子来看看是如何结合 Prometheus 使用的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Kit 从transport到service</title>
      <link>https://mfslog.github.io/post/kit-endpoint/</link>
      <pubDate>Tue, 03 Jul 2018 09:40:21 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/kit-endpoint/</guid>
      <description>&lt;p&gt;kit 工具库中，如果要构建一个服务，则需要准备transport，endpoint，service本文就来说一说三层具体是怎么串起来的
并看看中间件是怎么插进来的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>kit addsvc 例子注释(-)</title>
      <link>https://mfslog.github.io/post/kit-example-addsvc/</link>
      <pubDate>Mon, 02 Jul 2018 16:15:53 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/kit-example-addsvc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/go-kit/kit/tree/master/examples/addsvc&#34;&gt;addsvc&lt;/a&gt;示例使用了kit库的很多高级特性。
所以学习kit这个lib的时候，addsvc这个例子是需要好好研读的。addsvc 例子包含服务，传输层中间件，分布式
跟踪，富错误定义。服务端代码：cmd/addsvc, 客户端地址cmd/addcli&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go-kit/kit 介绍</title>
      <link>https://mfslog.github.io/post/kit-introduction/</link>
      <pubDate>Mon, 02 Jul 2018 09:27:03 +0800</pubDate>
      
      <guid>https://mfslog.github.io/post/kit-introduction/</guid>
      <description>&lt;p&gt;go kit是一种开源的微服务工具箱，可以用在现代企业应用程序栈中促进和规范化基于Go服务的创建。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>